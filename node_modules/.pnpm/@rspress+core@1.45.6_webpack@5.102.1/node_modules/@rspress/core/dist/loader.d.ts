import { AdditionalPage } from '@rspress/shared';
import { DefaultThemeConfig } from '@rspress/shared';
import type { FrontMatterMeta } from '@rspress/shared';
import type { PageIndexInfo } from '@rspress/shared';
import type { RouteMeta } from '@rspress/shared';
import type { Rspack as Rspack_2 } from '@rsbuild/core';
import type { RspressPlugin } from '@rspress/shared';
import type { UserConfig } from '@rspress/shared';

declare interface LoaderOptions {
    config: UserConfig;
    docDirectory: string;
    checkDeadLinks: boolean;
    routeService: RouteService;
    pluginDriver: PluginDriver;
}

declare function mdxLoader(this: Rspack_2.LoaderContext<LoaderOptions>, source: string): Promise<void>;
export default mdxLoader;

export declare interface PageMeta {
    toc: TocItem[];
    title: string;
    headingTitle: string;
    frontmatter?: FrontMatterMeta;
}

declare class PluginDriver {
    #private;
    constructor(config: UserConfig, isProd: boolean);
    init(): Promise<void>;
    addPlugin(plugin: RspressPlugin): void;
    getPlugins(): RspressPlugin[];
    clearPlugins(): void;
    removePlugin(pluginName: string): void;
    modifyConfig(): Promise<UserConfig<DefaultThemeConfig>>;
    beforeBuild(): Promise<void[]>;
    afterBuild(): Promise<void[]>;
    modifySearchIndexData(pages: PageIndexInfo[]): Promise<void[]>;
    extendPageData(pageData: PageIndexInfo): Promise<void[]>;
    addPages(): Promise<AdditionalPage[]>;
    routeGenerated(routes: RouteMeta[]): Promise<void[]>;
    addRuntimeModules(): Promise<Record<string, string>>;
    addSSGRoutes(): Promise<({
        path: string;
    } | {
        path: string;
    })[]>;
    globalUIComponents(): (string | [string, object])[];
    globalStyles(): string[];
    _runParallelAsyncHook<H extends RspressPluginHookKeys>(hookName: H, ...args: Parameters<Required<RspressPlugin>[H]>): Promise<Awaited<ReturnType<Required<RspressPlugin>[H]>>[]>;
    _runSerialAsyncHook<H extends RspressPluginHookKeys>(hookName: H, ...args: Parameters<Required<RspressPlugin>[H]>): RspressPlugin;
}

declare class RouteService {
    #private;
    routeData: Map<string, RouteMeta>;
    constructor(scanDir: string, userConfig: UserConfig, tempDir: string, pluginDriver: PluginDriver);
    get extensions(): readonly string[];
    init(): Promise<void>;
    addRoute(routeInfo: RouteMeta): void;
    removeRoute(filePath: string): void;
    getRoutes(): RouteMeta[];
    isExistRoute(routePath: string): boolean;
    isEmpty(): boolean;
    generateRoutesCode(isStaticImport?: boolean): string;
    generateRoutesCodeByRouteMeta(routeMeta: RouteMeta[], isStaticImport: boolean): string;
    getRoutePathParts(routePath: string): readonly [string, string, string];
    normalizeRoutePath(routePath: string): {
        routePath: string;
        lang: string;
        version: string;
    };
}

declare type RspressPluginHookKeys = 'beforeBuild' | 'afterBuild' | 'addPages' | 'addRuntimeModules' | 'routeGenerated' | 'addSSGRoutes' | 'extendPageData' | 'modifySearchIndexData';

declare interface TocItem {
    id: string;
    text: string;
    depth: number;
}

export { }
