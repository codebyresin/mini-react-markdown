import * as __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__ from "node:path";
import * as __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__ from "@rspress/shared";
import * as __WEBPACK_EXTERNAL_MODULE__rspress_shared_constants_70084e62__ from "@rspress/shared/constants";
import * as __WEBPACK_EXTERNAL_MODULE__rspress_shared_logger_4374e44a__ from "@rspress/shared/logger";
import * as __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__ from "node:fs/promises";
import * as __WEBPACK_EXTERNAL_MODULE__rspress_shared_node_utils_78947ce6__ from "@rspress/shared/node-utils";
async function pathExists(path) {
    try {
        await __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__["default"].access(path);
        return true;
    } catch (e) {
        return false;
    }
}
async function readJson(path) {
    const raw = await __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__["default"].readFile(path, 'utf8');
    return JSON.parse(raw);
}
async function detectFilePathWithExtension(rawPathWithExtension) {
    const exist = await pathExists(rawPathWithExtension);
    if (!exist) return;
    const stat = await __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__["default"].stat(rawPathWithExtension);
    if (!stat.isFile()) return;
    return rawPathWithExtension;
}
async function detectFilePath(rawPath, extensions) {
    const realPath = await detectFilePathWithExtension(rawPath);
    if (realPath) {
        const ext = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].extname(realPath);
        if (extensions.includes(ext)) return realPath;
    }
    const pathWithExtension = extensions.map((ext)=>`${rawPath}${ext}`);
    const realPaths = await Promise.all(pathWithExtension.map((p)=>detectFilePathWithExtension(p)));
    const findPath = pathWithExtension.find((_, i)=>realPaths[i]);
    return findPath;
}
async function extractInfoFromFrontmatter(filePath, rootDir, extensions) {
    const realPath = await detectFilePath(filePath, extensions);
    if (!realPath) {
        __WEBPACK_EXTERNAL_MODULE__rspress_shared_logger_4374e44a__.logger.warn(`Can't find the file: ${filePath}, please check it in "${__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].dirname(filePath), '_meta.json')}".`);
        return {
            realPath,
            title: '',
            overviewHeaders: void 0,
            context: void 0
        };
    }
    return {
        ...await extractInfoFromFrontmatterWithRealPath(realPath, rootDir),
        realPath
    };
}
async function extractInfoFromFrontmatterWithRealPath(realPath, rootDir) {
    const content = await __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__["default"].readFile(realPath, 'utf-8');
    const fileNameWithoutExt = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].basename(realPath, __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].extname(realPath));
    const h1RegExp = /^#\s+(.*)$/m;
    const match = content.match(h1RegExp);
    const { frontmatter } = (0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_node_utils_78947ce6__.loadFrontMatter)(content, realPath, rootDir);
    return {
        title: (0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_node_utils_78947ce6__.extractTextAndId)(frontmatter.title || (null == match ? void 0 : match[1]) || fileNameWithoutExt)[0],
        overviewHeaders: frontmatter.overviewHeaders,
        context: frontmatter.context
    };
}
function combineWalkResult(walks, versions) {
    return walks.reduce((acc, cur, curIndex)=>({
            nav: {
                ...acc.nav,
                [versions[curIndex] || 'default']: cur.nav
            },
            sidebar: {
                ...acc.sidebar,
                ...cur.sidebar
            }
        }), {
        nav: {},
        sidebar: {}
    });
}
function getHmrFileKey(realPath, docsDir) {
    return realPath ? __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].relative(docsDir, realPath).replace(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].extname(realPath), '').split(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].sep).join('/') : '';
}
const DEFAULT_DIRNAME_PREFIX = 'rspress-dir-default-';
async function scanSideMeta(workDir, rootDir, docsDir, routePrefix, extensions) {
    if (!await pathExists(workDir)) __WEBPACK_EXTERNAL_MODULE__rspress_shared_logger_4374e44a__.logger.error('[plugin-auto-nav-sidebar]', `Generate sidebar meta error: ${workDir} not exists`);
    const addRoutePrefix = (link)=>`${routePrefix}${link}`;
    const metaFile = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(workDir, '_meta.json');
    const relativePath = (0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__.slash)(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].relative(rootDir, workDir));
    let sideMeta;
    try {
        sideMeta = await readJson(metaFile);
    } catch (_e) {
        let subItems = await __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__["default"].readdir(workDir);
        subItems = subItems.filter((item)=>{
            const hasExtension = extensions.some((ext)=>item.endsWith(ext));
            const hasSameBaseName = subItems.some((elem)=>{
                const baseName = elem.replace(/\.[^/.]+$/, '');
                return baseName === item.replace(/\.[^/.]+$/, '') && elem !== item;
            });
            return !(hasExtension && hasSameBaseName);
        });
        sideMeta = (await Promise.all(subItems.map(async (item)=>{
            if ('_meta.json' === item) return null;
            const stat = await __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__["default"].stat(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(workDir, item));
            if (stat.isDirectory()) return {
                type: 'dir',
                name: item,
                label: `${DEFAULT_DIRNAME_PREFIX}${item}`
            };
            return extensions.some((ext)=>item.endsWith(ext)) ? item : null;
        }))).filter(Boolean);
    }
    const sidebarFromMeta = await Promise.all(sideMeta.map(async (metaItem)=>{
        if ('string' == typeof metaItem) {
            const { title, overviewHeaders, context, realPath } = await extractInfoFromFrontmatter(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(workDir, metaItem), rootDir, extensions);
            const pureLink = `${relativePath}/${metaItem.replace(/\.mdx?$/, '')}`;
            return {
                text: title,
                link: addRoutePrefix(pureLink),
                overviewHeaders,
                context,
                _fileKey: getHmrFileKey(realPath, docsDir)
            };
        }
        const { type = 'file', name, label, collapsible, collapsed, link, tag, dashed, overviewHeaders, context } = metaItem;
        const pureLink = `${relativePath}/${null == name ? void 0 : name.replace(/\.mdx?$/, '')}`;
        if ('file' === type) {
            const info = await extractInfoFromFrontmatter(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(workDir, name), rootDir, extensions);
            const title = label || info.title;
            const realPath = info.realPath;
            return {
                text: title,
                link: addRoutePrefix(pureLink),
                tag,
                overviewHeaders: info.overviewHeaders ? info.overviewHeaders : overviewHeaders,
                context: info.context ? info.context : context,
                _fileKey: getHmrFileKey(realPath, docsDir)
            };
        }
        if ('dir' === type) {
            const subDir = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(workDir, name);
            const subSidebar = await scanSideMeta(subDir, rootDir, docsDir, routePrefix, extensions);
            let realPath = await detectFilePath(subDir, extensions);
            let link;
            let _fileKey;
            if (realPath) {
                link = addRoutePrefix(pureLink);
                _fileKey = getHmrFileKey(realPath, docsDir);
            } else {
                const indexFileRealPath = await detectFilePath((0, __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.join)(subDir, 'index'), extensions);
                link = indexFileRealPath ? addRoutePrefix(pureLink) : '';
                _fileKey = getHmrFileKey(indexFileRealPath, docsDir);
                realPath = indexFileRealPath;
                const indexItemIndex = subSidebar.findIndex((i)=>i._fileKey === _fileKey);
                const isIndexFileInMetaItems = -1 !== indexItemIndex;
                if (isIndexFileInMetaItems) {
                    const isMetaJsonExist = await pathExists((0, __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.join)(subDir, '_meta.json'));
                    if (isMetaJsonExist) {
                        link = '';
                        _fileKey = getHmrFileKey(indexFileRealPath, docsDir);
                        realPath = void 0;
                    } else subSidebar.splice(indexItemIndex, 1);
                }
            }
            const { context: frontmatterContext = context, title } = realPath ? await extractInfoFromFrontmatterWithRealPath(realPath, rootDir) : {};
            function getDirLabelName() {
                let dirName;
                if ('string' == typeof label && label.startsWith(DEFAULT_DIRNAME_PREFIX)) dirName = label.replace(DEFAULT_DIRNAME_PREFIX, '');
                if (!dirName && label) return label;
                if (title) return title;
                return null != dirName ? dirName : '';
            }
            return {
                text: getDirLabelName(),
                collapsible,
                collapsed,
                items: subSidebar,
                link,
                tag,
                overviewHeaders,
                context: frontmatterContext,
                _fileKey
            };
        }
        if ('divider' === type) return {
            dividerType: dashed ? 'dashed' : 'solid'
        };
        if ('section-header' === type) return {
            sectionHeaderText: null != label ? label : '',
            tag
        };
        return {
            text: null != label ? label : '',
            link: void 0 === link ? '' : (0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__.isExternalUrl)(link) ? link : (0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__.withBase)(link, routePrefix),
            tag,
            context
        };
    }));
    return sidebarFromMeta;
}
async function walk(workDir) {
    let routePrefix = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : '/', docsDir = arguments.length > 2 ? arguments[2] : void 0, extensions = arguments.length > 3 ? arguments[3] : void 0;
    const rootMetaFile = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(workDir, '_meta.json');
    let navConfig;
    try {
        navConfig = await readJson(rootMetaFile);
    } catch (_e) {
        navConfig = [];
    }
    navConfig.forEach((navItem)=>{
        if ('items' in navItem) navItem.items.forEach((item)=>{
            if ('link' in item && !(0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__.isExternalUrl)(item.link)) item.link = (0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__.withBase)(item.link, routePrefix);
        });
        if ('link' in navItem && !(0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__.isExternalUrl)(navItem.link)) navItem.link = (0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__.withBase)(navItem.link, routePrefix);
    });
    const subDirs = (await Promise.all((await __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__["default"].readdir(workDir)).map((v)=>__WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__["default"].stat(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(workDir, v)).then((s)=>{
            if (s.isDirectory() && 'node_modules' !== v) return v;
            return false;
        })))).filter(Boolean);
    const sidebarConfig = {};
    for (const subDir of subDirs){
        const sidebarGroupKey = `${routePrefix}${subDir}`;
        sidebarConfig[sidebarGroupKey] = await scanSideMeta(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(workDir, subDir), workDir, docsDir, routePrefix, extensions);
    }
    return {
        nav: navConfig,
        sidebar: sidebarConfig
    };
}
function processLocales(langs, versions, root, defaultLang, defaultVersion, extensions) {
    return Promise.all(langs.map(async (lang)=>{
        const walks = versions.length ? await Promise.all(versions.map((version)=>{
            const routePrefix = (0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__.addTrailingSlash)(`${version === defaultVersion ? '' : `/${version}`}${lang === defaultLang ? '' : `/${lang}`}`);
            return walk(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(root, version, lang), routePrefix, root, extensions);
        })) : [
            await walk(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(root, lang), (0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__.addTrailingSlash)(lang === defaultLang ? '' : `/${lang}`), root, extensions)
        ];
        return combineWalkResult(walks, versions);
    }));
}
function pluginAutoNavSidebar() {
    return {
        name: 'auto-nav-sidebar',
        async config (config) {
            var _config_multiVersion;
            config.themeConfig = config.themeConfig || {};
            config.themeConfig.locales = config.themeConfig.locales || config.locales || [];
            const langs = config.themeConfig.locales.map((locale)=>locale.lang);
            const hasLocales = langs.length > 0;
            const hasLang = Boolean(config.lang);
            const versions = (null == (_config_multiVersion = config.multiVersion) ? void 0 : _config_multiVersion.versions) || [];
            const defaultLang = config.lang || '';
            const { default: defaultVersion = '' } = config.multiVersion || {};
            const { extensions = __WEBPACK_EXTERNAL_MODULE__rspress_shared_constants_70084e62__.DEFAULT_PAGE_EXTENSIONS } = (null == config ? void 0 : config.route) || {};
            if (hasLocales) {
                const metaInfo = await processLocales(langs, versions, config.root, defaultLang, defaultVersion, extensions);
                config.themeConfig.locales = config.themeConfig.locales.map((item, index)=>({
                        ...item,
                        ...metaInfo[index]
                    }));
            } else {
                if (hasLang) {
                    __WEBPACK_EXTERNAL_MODULE__rspress_shared_logger_4374e44a__.logger.error("`lang` is configured but `locales` not, thus `@rspress/plugin-auto-nav-sidebar` can not auto generate navbar level config correctly!\nplease check your config file");
                    return config;
                }
                const walks = versions.length ? await Promise.all(versions.map((version)=>{
                    const routePrefix = (0, __WEBPACK_EXTERNAL_MODULE__rspress_shared_baa012d0__.addTrailingSlash)(version === defaultVersion ? '' : `/${version}`);
                    return walk(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(config.root, version), routePrefix, config.root, extensions);
                })) : [
                    await walk(config.root, '/', config.root, extensions)
                ];
                const combined = combineWalkResult(walks, versions);
                config.themeConfig = {
                    ...config.themeConfig,
                    ...combined
                };
            }
            return config;
        }
    };
}
export { pluginAutoNavSidebar };
