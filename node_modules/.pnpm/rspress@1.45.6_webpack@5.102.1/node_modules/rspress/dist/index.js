import * as __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__ from "node:path";
import * as __WEBPACK_EXTERNAL_MODULE__rspress_core_1b2e46ce__ from "@rspress/core";
import * as __WEBPACK_EXTERNAL_MODULE__rspress_shared_logger_4374e44a__ from "@rspress/shared/logger";
import * as __WEBPACK_EXTERNAL_MODULE_cac__ from "cac";
import * as __WEBPACK_EXTERNAL_MODULE_chokidar__ from "chokidar";
import * as __WEBPACK_EXTERNAL_MODULE_picocolors__ from "picocolors";
import * as __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__ from "node:fs";
import * as __WEBPACK_EXTERNAL_MODULE__rspress_shared_constants_70084e62__ from "@rspress/shared/constants";
import * as __WEBPACK_EXTERNAL_MODULE_node_child_process_27f17141__ from "node:child_process";
import * as __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__ from "node:fs/promises";
var package_namespaceObject = {
    i8: "1.45.6"
};
const findConfig = (basePath)=>__WEBPACK_EXTERNAL_MODULE__rspress_shared_constants_70084e62__.DEFAULT_CONFIG_EXTENSIONS.map((ext)=>basePath + ext).find(__WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__["default"].existsSync);
async function loadConfigFile(customConfigFile) {
    const baseDir = process.cwd();
    let configFilePath = '';
    configFilePath = customConfigFile ? __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].isAbsolute(customConfigFile) ? customConfigFile : __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(baseDir, customConfigFile) : findConfig(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(baseDir, __WEBPACK_EXTERNAL_MODULE__rspress_shared_constants_70084e62__.DEFAULT_CONFIG_NAME));
    if (!configFilePath) {
        __WEBPACK_EXTERNAL_MODULE__rspress_shared_logger_4374e44a__.logger.info(`No config file found in ${baseDir}`);
        return {};
    }
    const { loadConfig } = await import("@rsbuild/core");
    const { content } = await loadConfig({
        cwd: __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].dirname(configFilePath),
        path: configFilePath
    });
    return content;
}
function resolveDocRoot(cwd, cliRoot, configRoot) {
    if (cliRoot) return __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(cwd, cliRoot);
    if (configRoot) return __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].isAbsolute(configRoot) ? configRoot : __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(cwd, configRoot);
    return __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(cwd, 'docs');
}
async function pathExists(path) {
    try {
        await __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__["default"].access(path);
        return true;
    } catch  {
        return false;
    }
}
const lockfileMap = {
    'package-lock.json': 'npm',
    'yarn.lock': 'yarn',
    'pnpm-lock.yaml': 'pnpm',
    'bun.lockb': 'bun'
};
async function getPackageManager(rootPath) {
    let packageManager = 'npm';
    for (const file of Object.keys(lockfileMap))if (await pathExists(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(rootPath, file))) {
        packageManager = lockfileMap[file];
        break;
    }
    return packageManager;
}
async function getRspressDependencies(rootPath) {
    const packageJson = JSON.parse(await __WEBPACK_EXTERNAL_MODULE_node_fs_promises_153e37e0__["default"].readFile(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(rootPath, 'package.json'), {
        encoding: 'utf-8'
    }));
    const dependencies = packageJson?.dependencies ? Object.keys(packageJson.dependencies) : [];
    const devDependencies = packageJson?.devDependencies ? Object.keys(packageJson.devDependencies) : [];
    return dependencies.concat(devDependencies).filter((item)=>item.startsWith('@rspress') || item.startsWith('rspress'));
}
async function update() {
    const cwd = process.cwd();
    const packageManager = await getPackageManager(cwd);
    const rspressDependencies = await getRspressDependencies(cwd);
    __WEBPACK_EXTERNAL_MODULE__rspress_shared_logger_4374e44a__.logger.greet(`Using ${packageManager} to update ${rspressDependencies.join(' ')}`);
    if ('npm' === packageManager || 'bun' === packageManager) {
        const dependencies = rspressDependencies.map((item)=>`${item}@latest`);
        (0, __WEBPACK_EXTERNAL_MODULE_node_child_process_27f17141__.spawn)(packageManager, [
            'install',
            '--save',
            ...dependencies
        ], {
            stdio: 'inherit'
        });
    } else {
        const subCommand = 'yarn' === packageManager ? 'upgrade' : 'update';
        (0, __WEBPACK_EXTERNAL_MODULE_node_child_process_27f17141__.spawn)(packageManager, [
            subCommand,
            '--latest',
            ...rspressDependencies
        ], {
            stdio: 'inherit'
        });
    }
}
const CONFIG_FILES = [
    'rspress.config.ts',
    'rspress.config.js',
    'i18n.json'
];
const META_FILE = '_meta.json';
const cli = (0, __WEBPACK_EXTERNAL_MODULE_cac__.cac)('rspress').version(package_namespaceObject.i8).help();
const landingMessage = `\u{1F525} Rspress v${package_namespaceObject.i8}\n`;
__WEBPACK_EXTERNAL_MODULE__rspress_shared_logger_4374e44a__.logger.greet(landingMessage);
const setNodeEnv = (env)=>{
    process.env.NODE_ENV = env;
};
cli.option('-c,--config [config]', 'Specify the path to the config file');
cli.command('[root]', 'start dev server').alias('dev').option('--port [port]', 'port number').option('--host [host]', 'hostname').action(async (root, options)=>{
    setNodeEnv('development');
    let isRestarting = false;
    const cwd = process.cwd();
    let cliWatcher;
    let devServer;
    const startDevServer = async ()=>{
        const { port, host } = options || {};
        const config = await loadConfigFile(options?.config);
        config.root = resolveDocRoot(cwd, root, config.root);
        const docDirectory = config.root;
        devServer = await (0, __WEBPACK_EXTERNAL_MODULE__rspress_core_1b2e46ce__.dev)({
            appDirectory: cwd,
            docDirectory,
            config,
            extraBuilderConfig: {
                server: {
                    port,
                    host
                }
            }
        });
        cliWatcher = __WEBPACK_EXTERNAL_MODULE_chokidar__["default"].watch([
            `${cwd}/**/{${CONFIG_FILES.join(',')}}`,
            docDirectory
        ], {
            ignoreInitial: true,
            ignored: [
                '**/node_modules/**',
                '**/.git/**',
                '**/.DS_Store/**'
            ]
        });
        cliWatcher.on('all', async (eventName, filepath)=>{
            if ('add' === eventName || 'unlink' === eventName || 'change' === eventName && (CONFIG_FILES.includes(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].basename(filepath)) || __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].basename(filepath) === META_FILE)) {
                if (isRestarting) return;
                isRestarting = true;
                console.log(`
\u{2728} ${eventName} ${__WEBPACK_EXTERNAL_MODULE_picocolors__["default"].green(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].relative(cwd, filepath))}, dev server will restart...\n`);
                await devServer.close();
                await cliWatcher.close();
                await startDevServer();
                isRestarting = false;
            }
        });
    };
    await startDevServer();
    const exitProcess = async ()=>{
        try {
            await devServer.close();
            await cliWatcher.close();
        } finally{
            process.exit(0);
        }
    };
    process.on('SIGINT', exitProcess);
    process.on('SIGTERM', exitProcess);
});
cli.command('build [root]').action(async (root, options)=>{
    setNodeEnv('production');
    const cwd = process.cwd();
    const config = await loadConfigFile(options.config);
    config.root = resolveDocRoot(cwd, root, config.root);
    const docDirectory = config.root;
    try {
        await (0, __WEBPACK_EXTERNAL_MODULE__rspress_core_1b2e46ce__.build)({
            appDirectory: cwd,
            docDirectory,
            config
        });
    } catch (err) {
        __WEBPACK_EXTERNAL_MODULE__rspress_shared_logger_4374e44a__.logger.error(err);
        process.exit(1);
    }
});
cli.command('preview [root]').alias('serve').option('--port [port]', 'port number').option('--host [host]', 'hostname').action(async (root, options)=>{
    setNodeEnv('production');
    const cwd = process.cwd();
    const { port, host } = options || {};
    const config = await loadConfigFile(options?.config);
    config.root = resolveDocRoot(cwd, root, config.root);
    await (0, __WEBPACK_EXTERNAL_MODULE__rspress_core_1b2e46ce__.serve)({
        config,
        host,
        port
    });
});
cli.command('update', 'update relevant packages about rspress').action(update);
cli.parse();
