[{"id":0,"title":"","content":"","routePath":"/example/Layout","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"","content":"","routePath":"/example/editor.preview","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"在线尝试","content":"","routePath":"/example/","lang":"","toc":[],"domain":"","frontmatter":{"pageType":"custom","title":"在线尝试","initVal":"./data.raw.txt"},"version":""},{"id":3,"title":"API","content":"#\n\n\n属性#\n\n提示\n\nEditor 组件基于 CodeMirror 实现，支持所有 CodeMirror\n的原生配置选项，并进行了功能扩展。本文档中仅列出了扩展属性和部分常用配置，如需了解全部配置选项，请查阅 CodeMirror 官方文档。\n\n\ntoolbars#\n\n * 类型：{ addTools?: ToolbarItem[]; excludeTools?: string[]; orderTools?: { type:\n   string; order: number }[]; }\n   * addTools：可以自定义新增 toolbar 配置项\n   * excludeTools：需要过滤工具项的 toolbar 数组配置项\n   * orderTools: 排序 toolbar 中工具项先后顺序的数组配置项\n * 默认值：undefined\n\n需要渲染的 toolbar，默认全部渲染。\n\n工具栏项接口定义：\n\n\n\n1. 移除工具栏#\n\n警告\n\n只能移除已存在的工具栏项，传入未被识别的工具栏项，不会生效。\n\n\n\n2. 新增工具栏#\n\n> 有三种方法可以自定义工具栏：配置项、组件、工具栏实例。\n\n * 方法1：配置项\n   \n   \n\n * 方法2：组件\n   \n   通过配置 component 属性，可以自定义工具栏的样式。\n   \n   > 在该方式中，工具栏的样式需要完全自定义。\n   \n   \n   \n   \n\n * 方法3： 工具栏实例\n   \n   可以通过 ToolbarManager 实例方法，对工具栏进行操作。\n   \n   此处给出添加工具栏项的示例:\n   \n   \n   \n   > 想要深入了解 ToolbarManager 实例方法，可以移步查看: ToolbarManager 实例方法。\n\n3. 工具栏排序#\n\n通过 orderTools 配置项，可以对工具栏中的工具项进行排序。\n\n> 只对 orderTools 中配置的工具项进行排序，未配置的工具项不受影响。\n\n\n\n\nplaceholder#\n\n * 类型：string\n * 默认值：undefined\n\n编辑器内容为空时，展示在编辑器中的提示文字。\n\n\n\n\nvalue#\n\n * 类型：string\n * 默认值：\"\"\n\n编辑器内容初始化内容。\n\n警告\n\n当 local 为 false 时，value 才会起作用。不然会默认使用 localStorage 中的内容。\n\n\n\n\nlocal#\n\n * 类型：boolean\n * 默认值：true\n\n是否开启本地存储，默认开启。\n\n> localStorage 存储的 key 为 markdown-editor-content\n\n\n\n\nstatus#\n\n * 类型：boolean\n * 默认值：true\n\n底部状态栏是否显示，默认显示。\n\n\n\n\ntheme#\n\n * 类型：\"light\" | \"dark\"\n * 默认值：\"light\"\n\n编辑器主题。\n\n\n\n\nlocale#\n\n * 类型：\"en\" | \"cn\" | \"tw\"\n * 默认值：\"cn\"\n\n语言环境。\n\n\n\n\nautoFocus#\n\n * 类型：boolean\n * 默认值：false\n\n是否自动聚焦，默认不聚焦。\n\n\n\n\nlineNumbers#\n\n * 类型：boolean\n * 默认值：false\n\n编辑区是否显示行号，默认不显示。\n\n\n\n\nenableShortcuts#\n\n * 类型：boolean\n * 默认值：true\n\n是否开启快捷键支持，默认开启。\n\n\n\n\nstyle、className、id等其他属性#\n\n为编辑区添加样式、类名、id...，可以使用 CodeMirror 的属性。\n\n> style、className、id 等属性，是继承的 CodeMirror 属性，所以配置的是编辑区。\n> \n>  * className：默认为 markdown-editor-content\n\n\n事件#\n\n提示\n\nEditor 组件的事件系统基于 CodeMirror\n进行了扩展，部分基础事件已重命名或优化。本文档列出了常用事件处理方法，如需了解全部事件类型及详细用法，请参考 CodeMirror 事件文档。\n\n\nonChange#\n\n * 类型：(value: string, editorView: ViewUpdate) => void\n   * value：编辑器内容\n   * editorView：编辑器实例\n\n编辑器内容变化时触发。\n\n\n\n\nonSave#\n\n * 类型：(value: string, editorView: EditorView) => void\n\n保存事件，当点击 保存按钮 / 按下快捷键 时触发。\n\n\n\n\nonUpload#\n\n * 类型：(file: File, callback: Callback) => void\n   * file：File 对象\n   * callback：Callback\n\n\n\n上传图片事件，等待上传结果，务必将上传后的 url 作为 callback 入参回传。\n\n\n\n\nonDragUpload#\n\n * 类型：(file: File, callback: Callback) => void\n   * file：File 对象\n   * callback：Callback\n\n\n\n拖拽上传图片时触发，务必将上传后的 url 作为 callback 入参回传。\n\n> callback的alt是可选项，如果没传的话就是nanoid生成的8位随机数字英文。\n\n\nonPatseUpload#\n\n粘贴上传图片时触发，同 onDragUpload 事件。\n\n\nref#\n\n编辑器实例方法。\n\n> 具体类型，参考 EditorRef\n\n\n\n\ngetContent#\n\n * 参数：void\n * 返回值：string\n\n获取编辑器内容。\n\n\n\n\nsetContent#\n\n * 参数：content: string\n * 返回值：void\n\n设置编辑器内容。\n\n\n\n\nclear#\n\n * 参数：void\n * 返回值：void\n\n清空编辑器内容。\n\n\n\n\nsetCursor#\n\n * 参数：start: number, end: number\n * 返回值：void\n\n设置光标位置。\n\n\n\n\ngetCursor#\n\n * 参数：void\n * 返回值：{ from: number, to: number }\n\n获取光标位置，返回开始和结束位置（如果 from === to，则表示未选中内容）。\n\n\n\n\ngetSelection#\n\n * 参数：void\n * 返回值：string\n\n获取选中内容，返回选中的内容。\n\n\n\n\nfocus#\n\n * 参数：void\n * 返回值：void\n\n设置编辑器聚焦。\n\n\n\n\ngetEditorInstance#\n\n * 参数：void\n * 返回值：EditorView | null\n\n获取 编辑区(CodeMirror) 实例。\n\n\n\n\ngetPreviewInstance#\n\n * 参数：void\n * 返回值：HTMLElement | null\n\n获取 预览区 实例。\n\n\n\n\n实例方法#\n\n\nToolbarManager#\n\n工具栏管理器，提供丰富的工具栏自定义功能。\n\n注意\n\n必须在渲染 <Editor /> 组件后才能使用 ToolbarManager。\n\n建议使用 try...catch 包裹相关操作以捕获可能的错误。\n\n\n\n基本用法示例：\n\n\n\ngetDefaultToolbar#\n\n获取默认工具栏配置。\n\n * 参数：void\n\n * 返回值：ToolbarItem[]\n\n * 说明：返回原始默认工具栏配置，不受 toolbar.excludeTools 属性影响。\n\n\n\ngetToolbarOrder#\n\n获取指定工具栏项的当前顺序。\n\n * 参数：type: ToolbarType - 工具栏类型\n * 返回值：number - 工具栏项的顺序索引，如果不存在则返回 -1\n * 说明：顺序索引从 0 开始，表示工具栏项在工具栏中的位置\n\n\n\ngetAllToolbarsOrder#\n\n获取所有工具栏项的顺序信息。\n\n * 参数：void\n * 返回值：{ type: ToolbarType; order: number }[] - 工具栏类型和顺序的数组\n * 说明：返回按顺序排列的工具栏类型和索引位置信息\n\n\n\ngetAllToolbars#\n\n获取当前所有工具栏项。\n\n * 参数：void\n * 返回值：ToolbarItem[]\n * 说明：返回当前实际使用的工具栏配置，包括所有自定义修改。\n\n\n\naddToolItem#\n\n添加新的工具栏项。\n\n * 参数：item: ToolbarItem - 工具栏项配置对象\n\n * 返回值：void\n\n * 说明：如果添加的工具栏类型已存在，将抛出错误。\n\n\n\nsetToolbarItemOrder#\n\n设置单个工具栏项的顺序。\n\n * 参数：\n   * type: ToolbarType - 工具栏类型\n   * newOrder: number - 新的顺序位置\n * 返回值：void\n * 说明：会自动调整其他工具栏项的顺序以适应变化\n\n\n\nsetToolbarOrder#\n\n批量设置多个工具栏项的顺序。\n\n * 参数：orders: Record<ToolbarType, number> - 类型到顺序的映射对象\n * 返回值：void\n * 说明：可以同时调整多个工具栏项的顺序\n\n\n\nupdateToolbars#\n\n完全替换工具栏配置。\n\n * 参数：newToolbars: ToolbarItem[] - 新的工具栏配置数组\n * 返回值：void\n\n警告\n\n此操作会覆盖所有现有工具栏项，请谨慎使用！\n\n\n\nupdateToolbarItem#\n\n更新特定工具栏项的配置。\n\n * 参数：\n   \n   * type: ToolbarType - 要更新的工具栏类型\n   * partialToolbarItem: Partial<ToolbarItem> - 部分工具栏配置\n\n * 返回值：void\n\n * 说明：只更新指定的属性，其他属性保持不变。\n\n\n\nremoveToolItem#\n\n移除指定的工具栏项。\n\n * 参数：type: ToolbarType - 要移除的工具栏类型\n * 返回值：void\n * 说明：如果指定类型不存在，此操作不会产生任何效果。\n\n\n\nreset#\n\n重置工具栏到初始状态。\n\n * 参数：void\n\n * 返回值：void\n\n * 说明：恢复到默认工具栏配置。\n\n\n\nreorderToolbar#\n\n重新排序工具栏。\n\n * 参数：newOrder: ToolbarType[] - 新的工具栏顺序数组\n * 返回值：void\n * 说明：必须包含所有现有工具栏类型，否则将抛出错误。\n\n\n\nswapToolbarsPosition#\n\n * 参数：\n   * firstType: ToolbarType - 第一个工具栏类型\n   * secondType: ToolbarType - 第二个工具栏类型\n * 返回值：void\n * 说明：如果指定的工具栏类型不存在，将抛出错误。\n\n交换两个工具栏项的位置。\n\n\n\n事件监听#\n\nToolbarManager 继承自 BaseClass，因此具有完整的事件管理能力，可以监听和响应工具栏变化事件。\n\n> 通过事件系统，您可以实现对工具栏变化的实时响应，如状态同步、UI更新等。\n\n事件监听方法示例：\n\n\n\n提示\n\n更多自定义事件类型，详见 类型 ToolbarEvents。\n\n扩展方法#\n\nToolbarManager 提供了插件系统，允许您注册自定义方法来扩展其功能，无需继承或修改原始类。\n\n注意\n\n自定义方法中，this 指向 ToolbarManager 实例，因此可以访问所有公共方法。但应避免直接访问私有属性或修改内部状态，以免导致意外行为。\n\nregisterMethod#\n\n注册自定义方法到工具栏管理器。\n\n * 参数：\n   * name: string - 方法名称\n   * method: (...args: any[]) => any - 方法实现\n   * override: boolean = false - 是否允许覆盖已存在的方法\n * 返回值：void\n\n\n\ncallMethod#\n\n调用已注册的自定义方法。\n\n * 参数:\n   * name: string - 方法名称\n   * ...args: any[] - 传递给方法的参数\n * 返回值: any - 自定义方法的返回值\n * 说明: 如果方法不存在，将抛出错误\n\n\n\nunregisterMethod#\n\n移除已注册的自定义方法。\n\n * 参数: name: string - 方法名称\n * 返回值: void\n * 说明: 如果方法不存在，此操作不会产生任何效果\n\n\n\n资源清理#\n\n当不再需要 ToolbarManager 时，应当调用 destroy() 方法释放资源：\n\n\n\n这将移除所有事件监听器和自定义方法，并标记实例为已销毁，防止内存泄漏和意外操作。\n\n\ninsertContent#\n\n对 Editor 的编辑区进行操作的方法，可结合 自定义toolbar 使用，实现完整功能。\n\n注意\n\n需要渲染 <Editor /> 组件后，才能使用 insertContent。\n\n\n\n1. insertContent#\n\n * 参数：content: string, selection: { anchor: number; head: number }\n * 返回值：void\n\n在编辑区插入内容（相比 insertTextAtCursor 方法，该方法控制更加精细）。\n\nselection 参数\n\nanchor、head：用于控制光标位置，当 anchor 和 head 相等时，表示光标在当前位置，如果 anchor 和 head\n不相等，则表示光标选中某段内容。\n\n\n\n2. insertTextAtCursor#\n\n * 参数：content: string\n * 返回值：void\n\n在编辑区插入文本。\n\n\n\n3. undo、redo#\n\n * 参数：void\n * 返回值：void\n\n撤销、重做。\n\n\n\n\n常量#\n\n\nEDITOR_CONTENT_KEY#\n\n编辑区内容存储( localStorage )的 key，值为 markdown-editor-content。\n\n\nSYNC_SCROLL_STATUS#\n\n同步滚动状态(存储在 localStorage 中)，值为 markdown-editor-sync-scroll。\n\n\n类型#\n\n\nEditorView、ViewUpdate#\n\n编辑区使用的是 CodeMirror，对外暴露了 EditorView 和 ViewUpdate 两个类型，可供使用。\n\n\n\n\nToolbarType#\n\n工具栏类型，用于配置 toolbar。\n\n\n\n使用：\n\n\n\n\nToolbarItem#\n\n工具栏每一项类型。\n\n\n\n\nToolbarEvents#\n\n工具栏基础自定义事件类型。\n\n\n\n\nToolbarContextValues#\n\n工具栏上下文值接口，可以对工具栏进行“增删改查”。\n\n\n\n\nGlobalConfig#\n\n全局配置类型。\n\n> ReactCodeMirrorProps 来自 @uiw/react-codemirror。\n> \n> 因此，可以使用 CodeMirrorProps 中的配置。\n\n\n\n其他类型\n\n\n\n\nEditorRef#\n\n","routePath":"/guide/api","lang":"","toc":[{"text":"属性","id":"属性","depth":2,"charIndex":3},{"text":"toolbars","id":"toolbars","depth":3,"charIndex":125},{"text":"1. 移除工具栏","id":"1-移除工具栏","depth":4,"charIndex":420},{"text":"2. 新增工具栏","id":"2-新增工具栏","depth":4,"charIndex":469},{"text":"3. 工具栏排序","id":"3-工具栏排序","depth":4,"charIndex":778},{"text":"placeholder","id":"placeholder","depth":3,"charIndex":870},{"text":"value","id":"value","depth":3,"charIndex":942},{"text":"local","id":"local","depth":3,"charIndex":1052},{"text":"status","id":"status","depth":3,"charIndex":1156},{"text":"theme","id":"theme","depth":3,"charIndex":1212},{"text":"locale","id":"locale","depth":3,"charIndex":1270},{"text":"autoFocus","id":"autofocus","depth":3,"charIndex":1327},{"text":"lineNumbers","id":"linenumbers","depth":3,"charIndex":1385},{"text":"enableShortcuts","id":"enableshortcuts","depth":3,"charIndex":1448},{"text":"style、className、id等其他属性","id":"styleclassnameid等其他属性","depth":3,"charIndex":1513},{"text":"事件","id":"事件","depth":2,"charIndex":1682},{"text":"onChange","id":"onchange","depth":3,"charIndex":1793},{"text":"onSave","id":"onsave","depth":3,"charIndex":1914},{"text":"onUpload","id":"onupload","depth":3,"charIndex":2009},{"text":"onDragUpload","id":"ondragupload","depth":3,"charIndex":2159},{"text":"onPatseUpload","id":"onpatseupload","depth":3,"charIndex":2354},{"text":"ref","id":"ref","depth":2,"charIndex":2401},{"text":"getContent","id":"getcontent","depth":3,"charIndex":2441},{"text":"setContent","id":"setcontent","depth":3,"charIndex":2493},{"text":"clear","id":"clear","depth":3,"charIndex":2554},{"text":"setCursor","id":"setcursor","depth":3,"charIndex":2599},{"text":"getCursor","id":"getcursor","depth":3,"charIndex":2669},{"text":"getSelection","id":"getselection","depth":3,"charIndex":2776},{"text":"focus","id":"focus","depth":3,"charIndex":2837},{"text":"getEditorInstance","id":"geteditorinstance","depth":3,"charIndex":2882},{"text":"getPreviewInstance","id":"getpreviewinstance","depth":3,"charIndex":2966},{"text":"实例方法","id":"实例方法","depth":2,"charIndex":3040},{"text":"ToolbarManager","id":"toolbarmanager","depth":3,"charIndex":3048},{"text":"getDefaultToolbar","id":"getdefaulttoolbar","depth":4,"charIndex":3181},{"text":"getToolbarOrder","id":"gettoolbarorder","depth":4,"charIndex":3298},{"text":"getAllToolbarsOrder","id":"getalltoolbarsorder","depth":4,"charIndex":3437},{"text":"getAllToolbars","id":"getalltoolbars","depth":4,"charIndex":3576},{"text":"addToolItem","id":"addtoolitem","depth":4,"charIndex":3673},{"text":"setToolbarItemOrder","id":"settoolbaritemorder","depth":4,"charIndex":3777},{"text":"setToolbarOrder","id":"settoolbarorder","depth":4,"charIndex":3923},{"text":"updateToolbars","id":"updatetoolbars","depth":4,"charIndex":4049},{"text":"updateToolbarItem","id":"updatetoolbaritem","depth":4,"charIndex":4165},{"text":"removeToolItem","id":"removetoolitem","depth":4,"charIndex":4343},{"text":"reset","id":"reset","depth":4,"charIndex":4452},{"text":"reorderToolbar","id":"reordertoolbar","depth":4,"charIndex":4519},{"text":"swapToolbarsPosition","id":"swaptoolbarsposition","depth":4,"charIndex":4632},{"text":"事件监听","id":"事件监听","depth":4,"charIndex":4797},{"text":"扩展方法","id":"扩展方法","depth":4,"charIndex":4953},{"text":"资源清理","id":"资源清理","depth":4,"charIndex":5506},{"text":"insertContent","id":"insertcontent","depth":3,"charIndex":5605},{"text":"1. insertContent","id":"1-insertcontent","depth":4,"charIndex":5716},{"text":"2. insertTextAtCursor","id":"2-inserttextatcursor","depth":4,"charIndex":5964},{"text":"3. undo、redo","id":"3-undoredo","depth":4,"charIndex":6036},{"text":"常量","id":"常量","depth":2,"charIndex":6086},{"text":"EDITOR_CONTENT_KEY","id":"editor_content_key","depth":3,"charIndex":6092},{"text":"SYNC_SCROLL_STATUS","id":"sync_scroll_status","depth":3,"charIndex":6172},{"text":"类型","id":"类型","depth":2,"charIndex":6254},{"text":"EditorView、ViewUpdate","id":"editorviewviewupdate","depth":3,"charIndex":6260},{"text":"ToolbarType","id":"toolbartype","depth":3,"charIndex":6348},{"text":"ToolbarItem","id":"toolbaritem","depth":3,"charIndex":6393},{"text":"ToolbarEvents","id":"toolbarevents","depth":3,"charIndex":6421},{"text":"ToolbarContextValues","id":"toolbarcontextvalues","depth":3,"charIndex":6455},{"text":"GlobalConfig","id":"globalconfig","depth":3,"charIndex":6508},{"text":"EditorRef","id":"editorref","depth":3,"charIndex":6628}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"AST 解析","content":"#\n\n一个 Markdown 编辑器的 AST 解析器，支持 ESM 和 CommonJS 两个格式，也支持增量构建。\n\n\n安装#\n\n\nAPI#\n\n\nparseMarkdown#\n\n * 参数：markdown: string, options?: IncrementalParseOptions\n   * markdown：markdown 内容\n   * options：可选参数\n     * prevMarkdown上次解析的 markdown 内容\n     * prevRoot：上次解析的 ast 对象，用于增量构建\n * 返回值：RootTokens，解析的 ast 对象\n\n用于解析 markdown 文本，返回一个 ast 对象。\n\n基本使用：\n\n\n\n解析后的内容\n\n\n\n增量构建：\n\n\n\n\ntransformHtml#\n\n * 参数：ast: RootTokens\n * 返回值：string，转换后的 html 字符串\n\n用于将 ast 对象转换为 html 字符串。\n\n\n\n注意\n\n解析后，在 html 中，添加了 data-line 属性，用于标识行号。同时对于一些特殊节点，也添加了 class 属性，用于处理样式。\n\n该包中也导出了前缀常量prefix，值为：mini-md。\n\n\n\n\n不同环境下使用#\n\n\n\n\n样式#\n\n该库导出了一个默认样式文件，用于渲染转换后的html样式。\n\n> 对于代码块的样式，需要手动引入样式文件。\n> \n> import \"highlight.js/styles/atom-one-dark.css\";\n\n\n\n\n案例#\n\n\n\n\n类型#\n\n\nTOKENS_TYPES#\n\n分词常量。\n\n\n\n\nTokens#\n\n每个节点的类型。\n\n\n\n\nRootTokens#\n\n根节点类型。\n\n\n\n\nTokens的 Key、Value 类型#\n\n\n\n\nIncrementalParseOptions#\n\n增量构建配置项类型。\n\n","routePath":"/guide/ast-parser","lang":"","toc":[{"text":"安装","id":"安装","depth":2,"charIndex":61},{"text":"API","id":"api","depth":2,"charIndex":67},{"text":"parseMarkdown","id":"parsemarkdown","depth":3,"charIndex":74},{"text":"transformHtml","id":"transformhtml","depth":3,"charIndex":355},{"text":"不同环境下使用","id":"不同环境下使用","depth":2,"charIndex":558},{"text":"样式","id":"样式","depth":2,"charIndex":571},{"text":"案例","id":"案例","depth":2,"charIndex":687},{"text":"类型","id":"类型","depth":2,"charIndex":695},{"text":"TOKENS_TYPES","id":"tokens_types","depth":3,"charIndex":701},{"text":"Tokens","id":"tokens","depth":3,"charIndex":726},{"text":"RootTokens","id":"roottokens","depth":3,"charIndex":748},{"text":"Tokens的 Key、Value 类型","id":"tokens的-keyvalue-类型","depth":3,"charIndex":772},{"text":"IncrementalParseOptions","id":"incrementalparseoptions","depth":3,"charIndex":798}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"渲染区样式","content":"#\n\n\n自定义渲染区样式#\n\n通过 className 可以自定义渲染区样式，进行样式重写。\n\n> 外层容器类名 .markdown-editor-preview。\n\n\n\n\nCode 代码块样式#\n\n代码块主题，使用的 highlight.js。可以自行导入样式使用，例如：\n\n","routePath":"/guide/custom-preview","lang":"","toc":[{"text":"自定义渲染区样式","id":"自定义渲染区样式","depth":2,"charIndex":3},{"text":"Code 代码块样式","id":"code-代码块样式","depth":2,"charIndex":86}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"Markdown 语法","content":"#\n\n\n标题#\n\n\n\n\n加粗、斜体、下划线、删除线#\n\n输入：\n\n\n\n输出：\n\n加粗、斜体、、删除线\n\n\n引用#\n\n输入：\n\n\n\n输出：\n\n> 引用一段内容\n\n\n分割线#\n\n输入：\n\n\n\n输出：\n\n--------------------------------------------------------------------------------\n\n\n列表#\n\n输入：\n\n\n\n输出：\n\n无序列表：\n\n * 列表1\n * 列表2\n * 列表3\n\n有序列表：\n\n 1. 列表1\n 2. 列表2\n 3. 列表3\n\n\n内联代码#\n\n\n\n输出：\n\n内联代码\n\n\n代码块#\n\n输入：\n\n输出：\n\n\n\n\n链接#\n\n输入：\n\n\n\n输出：\n\n链接文字\n\n\n图片#\n\n输入：\n\n\n\n输出：\n\n\n表格#\n\n输入：\n\n\n\n输出：\n\n表头1   表头2   表头3\n内容1   内容2   内容3","routePath":"/guide/grammar","lang":"","toc":[{"text":"标题","id":"标题","depth":2,"charIndex":3},{"text":"加粗、斜体、下划线、删除线","id":"加粗斜体下划线删除线","depth":2,"charIndex":11},{"text":"引用","id":"引用","depth":2,"charIndex":52},{"text":"分割线","id":"分割线","depth":2,"charIndex":80},{"text":"列表","id":"列表","depth":2,"charIndex":181},{"text":"内联代码","id":"内联代码","depth":2,"charIndex":260},{"text":"代码块","id":"代码块","depth":2,"charIndex":281},{"text":"链接","id":"链接","depth":2,"charIndex":300},{"text":"图片","id":"图片","depth":2,"charIndex":324},{"text":"表格","id":"表格","depth":2,"charIndex":342}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"介绍","content":"#\n\n背景\n\nMini Markdown Editor 是 2025年寒假字节青训营「前端」的一个开源项目。\n\n此项目旨在提供一个简单、易用且高性能的 Markdown 编辑体验。这个项目的核心目标是通过精简和优化，让开发者能够更专注于 Markdown\n内容的创作，同时保证其高效的解析与渲染能力。\n\n该项目采用 pnpm + monorepo 进行管理，确保了多个子项目的模块化管理以及高效的构建流程。项目包含两个核心子项目：\n\n * @mini-markdown-rc/ast-parser：核心库。该库负责将 Markdown 文本解析为抽象语法树（AST），并根据需要转换为 HTML\n   或其他格式。\n * @mini-markdown-rc/editor：基于 React 实现的 Markdown\n   编辑器，集成了语法高亮、实时预览等功能，提供了流畅的编辑体验。\n\n\n功能亮点#\n\n * 简洁易用：用户可以快速上手，编辑界面直观清晰。\n * 高性能：采用高效的 AST 解析和渲染机制，即使处理十万+的内容依然保持流畅。\n * 灵活定制：提供丰富的 API，用户可以根据需求自定义工具栏、主题以及编辑器行为。\n * 兼容性强：支持常见的 Markdown 语法，并能够生成标准的 HTML 代码，保证兼容性。","routePath":"/guide/","lang":"","toc":[{"text":"功能亮点","id":"功能亮点","depth":2,"charIndex":394}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"快捷键","content":"#\n\n功能     快捷键（MAC）        快捷键（WINDOWS）\n加粗     ⌘ + B           Ctrl + B\n斜体     ⌘ + I           Ctrl + I\n下划线    ⌘ + U           Ctrl + U\n删除线    ⌘ + Shift + X   Ctrl + Shift + X\n引用     ⌘ + Shift + 9   Ctrl + Shift + 9\n无序列表   ⌘ + Shift + 8   Ctrl + Shift + 8\n有序列表   ⌘ + Shift + 7   Ctrl + Shift + 7\n内联代码   ⌘ + `           Ctrl + `\n代码块    ⌘ + Alt + C     Ctrl + Alt + C\n链接     ⌘ + K           Ctrl + K\n表格     ⌘ + Alt + T     Ctrl + Alt + T\n撤销     ⌘ + Z           Ctrl + Z\n重做     ⌘ + Shift + Z   Ctrl + Shift + Z\n全屏     ⌘ + Alt + F     Ctrl + Alt + F\n保存     ⌘ + S           Ctrl + S","routePath":"/guide/shortcut-keys","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"快速开始","content":"#\n\n\n在线尝试#\n\n可以直接在 在线尝试 上进行在线尝试。\n\n\n安装#\n\n\n使用#\n\n","routePath":"/guide/start","lang":"","toc":[{"text":"在线尝试","id":"在线尝试","depth":2,"charIndex":3},{"text":"安装","id":"安装","depth":2,"charIndex":32},{"text":"使用","id":"使用","depth":2,"charIndex":38}],"domain":"","frontmatter":{},"version":""}]